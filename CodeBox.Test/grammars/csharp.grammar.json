{
    "key": "csharp",
    "name": "C#",
    "extensions": [ "cs" ],
    "numbers": "(0123456789)[x]{0123456789.+-_abcdef}(lufdm)(ul)",
    "delimeters": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
    "brackets": "(){}[]",
    "commentMask": "/* */",
    "indentProvider": "indent.curly",
    "foldingProvider": "folding.indent",
    "styleNumbers": true,
    "keywords": [
        {
            "style": "keyword",
            "words": "ascending by equals from in into join let on orderby select group where descending class delegate enum struct interface abstract const explicit extern implicit internal namespace operator override private protected public readonly sealed static volatile virtual as base break case catch checked continue default do else finally fixed for foreach goto if is lock new out params ref return sizeof stackalloc switch this throw try typeof unchecked unsafe using while"
        },
        {
            "style": "keyword.typename",
            "words": "bool byte decimal char double float int long object sbyte short string uint ulong ushort void"
        },
        {
            "style": "keyword.special",
            "words": "partial global var dynamic add get set remove value async await yield"
        },
        {
            "style": "keyword.literal",
            "words": "true false null"
        },
        {
            "style": "preprocessor",
            "words": "#if #else #elif #endif #define #undef #warning #error #line #region #endregion #pragma #pragma #pragma"
        }
    ],
    "sections": [
        {
            "key": "comment",
            "start": "//",
            "style": "comment"
        },
        {
            "key": "comment.document",
            "start": "///",
            "style": "comment.document"
        },
        {
            "key": "comment.multiline",
            "start": "/*",
            "end": "*/",
            "style": "comment.multiline",
            "multiline": true
        },
        {
            "key": "string",
            "start": "\"",
            "end": "\"",
            "escape": "\\",
            "style": "string"
        },
        {
            "key": "string.macro",
            "start": "$\"",
            "end": "\"",
            "escape": "\\",
            "style": "string"
        },
        {
            "key": "string.multiline",
            "start": "@\"",
            "end": "\"",
            "terminatorEnd": "\"",
            "multiline": true,
            "style": "string.multiline"
        },
        {
            "key": "char",
            "start": "'",
            "end": "'",
            "escape": "\\",
            "style": "char"
        },
        {
            "key": "string.csharp",
            "parent": "string.macro",
            "start": "{",
            "end": "}",
            "terminator": "{",
            "styleNumbers": true,
            "keywords": [
                {
                    "style": "keyword",
                    "words": "new this base"
                },
                {
                    "style": "keyword.typename",
                    "words": "bool byte decimal char double float int long object sbyte short string uint ulong ushort void"
                },
                {
                    "style": "keyword.literal",
                    "words": "true false null"
                }
            ]
        },
        {
            "key": "expression_comment.multiline",
            "parent": "string.csharp",
            "start": "/*",
            "end": "*/",
            "style": "comment.multiline",
            "multiline": false
        },
        {
            "key": "expression_string",
            "parent": "string.csharp",
            "start": "\"",
            "end": "\"",
            "escape": "\\",
            "style": "string"
        },
        {
            "key": "expression_char",
            "parent": "string.csharp",
            "start": "'",
            "end": "'",
            "escape": "\\",
            "style": "char"
        }
    ]
}