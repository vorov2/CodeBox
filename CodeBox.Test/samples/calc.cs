using System;using System.Threading;class Program{    static void Main()    {        Console.WriteLine("Welcome to console calculator!");        Console.WriteLine("Enter mathematic expressions in reverse notation, e.g. '+ 2 3'.");        Console.WriteLine("To exit enter 'bye'.");        Console.WriteLine();        Cycle();    }    static void Cycle()    {        while (true) {            Console.Write(">");            var str = Console.ReadLine();            if (string.Equals(str, "bye", StringComparison.OrdinalIgnoreCase))                return;            var exp = ParseInput(str);            if (exp != null)                Console.WriteLine(exp.Eval());            Console.WriteLine();        }    }    static Expression ParseInput(string input)    {        var arr = input.Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);        var exp = new Expression();        for (var i = 0; i < arr.Length; i++) {            var str = arr[i];            if (i == 0) {                if (str == "+")                    exp.Op = Operation.Add;                else if (str == "-")                    exp.Op = Operation.Sub;                else if (str == "*")                    exp.Op = Operation.Mul;                else if (str == "/")                    exp.Op = Operation.Div;                else {                    Error($"Unknown operation: {str}.");                    return null;                }            }            else {                double num;                if (!double.TryParse(str, NumberFormats.Number, CultureInfo.InvariantCulture, out num)) {                    Error($"Invalid number literal: {str}.");                    return null;                }                exp.Arguments.Add(num);            }        }        return exp;    }    static void Error(string message)    {        Console.WriteLine("Error: {0}", message);    }}enum Operation{    Add,    Sub,    Mul,    Div}class Expression{    public Operation Op { get; set; }    public List<double> Arguments { get; } = new List<double>();    public double Eval()    {        double? res = null;        foreach (var n in Arguments) {            if (res != null)                res = Bin(res.Value, n);            else                res = n;        }        return res;    }    private double Bin(double x, double y)    {        switch (Op) {            case Operation.Add: return x + y;            case Operation.Sub: return x - y;            case Operation.Mul: return x * y;            case Operation.Div: return x / y;            default: return 0d;        }    }}